class Solution
{
    //Function to sort the given linked list using Merge Sort.
    static Node mergeSort(Node head)
    {
        if(head == null || head.next == null){
            return head;
        }
        
        Node mid = findMid(head);
        Node left = head;
        Node right = mid.next;
        mid.next = null;
        
        left = mergeSort(left);
        right = mergeSort(right);
        
        return merge(left, right);
        
        // 3 -> 5 -> 2      4 -> 1
        
        // 3 -> 5   2       4    1
        
        // 3    5 
    }
    
    static Node findMid(Node head){
        Node slow = head, fast = head.next;
        while(fast != null && fast.next != null){
            slow = slow.next;
            fast = fast.next.next;
        }
        return slow;
    }
    
    static Node merge(Node head1, Node head2) {
     Node temp = new Node(-1);
     Node head = temp;
     
     while(head1 != null && head2 != null){
         if(head1.data < head2.data){
             temp.next = head1;
             temp = temp.next;
             head1 = head1.next;
         }
         else{
             temp.next = head2;
             temp = temp.next;
             head2 = head2.next;
         }
     }
     Node ref = head1 == null? head2 : head1;
     while(ref != null){
         temp.next = ref;
         ref = ref.next;
         temp = temp.next;
     }
     return head.next;
    } 
}
