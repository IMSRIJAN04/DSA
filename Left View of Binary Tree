class Tree
{
    //Function to return list containing elements of left view of binary tree.
    int maxLevel = 0;
    ArrayList<Integer> leftView(Node root)
    {
      // Your code here
      ArrayList<Integer> res = new ArrayList<>();
      return height(root, 1, res);
    }
    ArrayList<Integer> height(Node root, int level, ArrayList<Integer> res){
        if(root ==  null) return res;
        if(this.maxLevel < level){
            this.maxLevel = level;
            res.add(root.data);
        }
        height(root.left, level+1, res);
        height(root.right, level+1, res);
        return res;
    }
}

// Using Queue
class Tree
{
    //Function to return list containing elements of left view of binary tree.
    ArrayList<Integer> leftView(Node root)
    {
      // Your code here
      //left view is first element in each level order traversal -> 
      ArrayList<Integer> res = new ArrayList<Integer>();
      if(root == null) return res;
      Queue<Node> q = new LinkedList<Node>();
      q.offer(root);
      Node dummy = new Node(-1);
      q.offer(dummy);
      res.add(root.data);
      
      while(!q.isEmpty()){
          Node temp = q.poll();
          if(temp.data != -1){
              if(temp.left != null) q.offer(temp.left);
              if(temp.right != null) q.offer(temp.right);
          }
          else{
              if(q.isEmpty()) break;
              res.add(q.peek().data);
              q.offer(temp);
          }
      }
      return res;
    }
}
