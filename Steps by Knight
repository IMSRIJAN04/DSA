
class Solution
{
    class position{
        int x;
        int y;
        int dist;
        position(int a, int b, int dist){
            this.x = a;
            this.y = b;
            this.dist = dist;
        }
    }
    
    boolean isSafe(int x, int y, int N){
        if(x >= 1 && x <= N && y >=1 && y <= N){
            return true;
        }
        return false;
    }
    
    void calculatePossiblePositions(Queue q, position p, int N, int[][] possibilities){
        int x = p.x;
        int y = p.y;
        if(isSafe(x-2,y-1,N) && possibilities[x-2][y-1] == 0){
            possibilities[x-2][y-1] = 1;
            q.add(new position(x-2,y-1,p.dist+1));
        }
    
        if(isSafe(x-1,y-2,N) && possibilities[x-1][y-2] == 0){
            possibilities[x-1][y-2] = 1;
            q.add(new position(x-1,y-2,p.dist+1));
        }
        
        if(isSafe(x+1,y-2,N) && possibilities[x+1][y-2] == 0){
            possibilities[x+1][y-2] = 1;
            q.add(new position(x+1,y-2,p.dist+1));
        }
        
        if(isSafe(x+2,y-1,N) && possibilities[x+2][y-1] == 0){
            possibilities[x+2][y-1] = 1;
            q.add(new position(x+2,y-1,p.dist+1));
        }
        
        if(isSafe(x-2,y+1,N) && possibilities[x-2][y+1] == 0){
            possibilities[x-2][y+1] = 1;
            q.add(new position(x-2,y+1,p.dist+1));
        }
        
         if(isSafe(x-1,y+2,N) && possibilities[x-1][y+2] == 0){
            possibilities[x-1][y+2] = 1;
            q.add(new position(x-1,y+2,p.dist+1));
        }
        
        if(isSafe(x+1,y+2,N) && possibilities[x+1][y+2] == 0){
            possibilities[x+1][y+2] = 1;
            q.add(new position(x+1,y+2,p.dist+1));
        }
        
        if(isSafe(x+2,y+1,N) && possibilities[x+2][y+1] == 0){
            possibilities[x+2][y+1] = 1;
            q.add(new position(x+2,y+1,p.dist+1));
        }
       
    }
    //Function to find out minimum steps Knight needs to reach target position.
    public int minStepToReachTarget(int KnightPos[], int TargetPos[], int N)
    {
        // Code here
        
        if(KnightPos[0] == TargetPos[0] && KnightPos[1] == TargetPos[1]) return 0;
        int ans = 0;
        int chessBoard[][] = new int[N+1][N+1];
        int possibilities[][] = new int[N+1][N+1];
        position initialPos = new position(KnightPos[0], KnightPos[1], 0);
        possibilities[initialPos.x][initialPos.y] = 1;
        Queue<position> q = new LinkedList<position>();
        calculatePossiblePositions(q, initialPos, N, possibilities);
        q.add(new position(-1,-1,0));
        ans++;
        
        while(!q.isEmpty()){
            position temp = q.poll();
            // System.out.println(temp.x + " " + temp.y);
            if(temp.x == TargetPos[0] && temp.y == TargetPos[1]) {
                // return temp.dist; you can return this as answer well
                return ans;
            }
            if(temp.x == -1 && temp.y == -1){
                //  System.out.println("------");
                if(q.isEmpty()){
                    return -1;
                } 
                ans++;
                q.add(new position(-1,-1,0));
                continue;
            }
            calculatePossiblePositions(q, temp, N, possibilities);
        }
        
        return -1;
    }
}
